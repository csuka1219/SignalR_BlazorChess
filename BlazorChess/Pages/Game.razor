@page "/game/{gameName}"
@using BlazorChess.Pieces;

<MudDropContainer T="Piece" @ref="_container" Items="@list" CanDropClass="mud-border-info" NoDropClass="mud-border-error"
                  CanDrop="@( (item,identifier ) => canDrop(item,identifier))"
    ItemsSelector="@((item,dropzone) => item.Position == dropzone)" ItemDropped="pieceUpdated" 
    Class="border-2 border-solid mud-border-lines-default">
    <ChildContent>           
        @for (int r = 0; r < 8; r++)
        {
            string row = r.ToString();
            <div class="d-flex">
            @for (int c = 0; c < 8; c++)
            {
                string col = c.ToString();
                <MudDropZone T="Piece" Identifier="@($"{row}{col}")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:64px;width:64px;"/>
            }
            </div>
        }
    </ChildContent>
    <ItemRenderer>
        <div class="d-flex justify-center align-center flex-grow-1">
            <MudIcon Icon="@context.Icon" Color="context.Color == Pieces.Color.White ? MudBlazor.Color.Primary:MudBlazor.Color.Secondary" Size="Size.Large" />
        </div>
    </ItemRenderer>
</MudDropContainer>
